<%=
@xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8"
@xml.Workbook({
  'xmlns'      => "urn:schemas-microsoft-com:office:spreadsheet",
  'xmlns:o'    => "urn:schemas-microsoft-com:office:office",
  'xmlns:x'    => "urn:schemas-microsoft-com:office:excel",
  'xmlns:html' => "http://www.w3.org/TR/REC-html40",
  'xmlns:ss'   => "urn:schemas-microsoft-com:office:spreadsheet"
  }) do

  @xml.Styles do
   @xml.Style 'ss:ID' => 'Default', 'ss:Name' => 'Normal' do
     @xml.Alignment 'ss:Vertical' => 'Top', 'ss:WrapText' => '1'
     @xml.Borders
     @xml.Font 'ss:FontName' => 'Verdana'
     @xml.Interior
     @xml.NumberFormat
     @xml.Protection
   end
   @xml.Style 'ss:ID' => 's22' do
     @xml.NumberFormat 'ss:Format' => 'General Date'
   end
   @xml.Style 'ss:ID' => 's62', 'ss:Name' => 'Header' do
     @xml.Font  'ss:Color'=>'#FFFFFF', 'ss:Bold'=>"1"
     @xml.Interior 'ss:Color'=>"#000000", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's75', 'ss:Name' => 'Closed' do
     @xml.Font 'ss:Color'=>'#C5BE97', 'ss:Italic' => '1'
   end
   @xml.Style 'ss:ID' => 's76', 'ss:Name' => 'Alert' do
     @xml.Font 'ss:Color'=>'#FF0000'
   end

   @xml.Style 'ss:ID' => 's77', 'ss:Name' => 'StatusUnknown' do
     @xml.Font 'ss:Color'=>'#555555'
   end
   @xml.Style 'ss:ID' => 's78', 'ss:Name' => 'StatusGreen' do
     @xml.Font 'ss:Color'=>'#00FF00'
   end
   @xml.Style 'ss:ID' => 's79', 'ss:Name' => 'StatusAmber' do
     @xml.Font 'ss:Color'=>'#FFAA00'
   end
   @xml.Style 'ss:ID' => 's80', 'ss:Name' => 'StatusRed' do
     @xml.Font 'ss:Color'=>'#FF0000'
   end

   @xml.Style 'ss:ID' => 's81', 'ss:Name' => 'CurrentStatusUnknown' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'1'
     @xml.Interior 'ss:Color'=>"#DDDDDD", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's82', 'ss:Name' => 'CurrentStatusGreen' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'1'
     @xml.Interior 'ss:Color'=>"#00FF00", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's83', 'ss:Name' => 'CurrentStatusAmber' do
     @xml.Font 'ss:Color'=>'#FFFFFF', 'ss:Bold'=>'1'
     @xml.Interior 'ss:Color'=>"#FFAA00", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's84', 'ss:Name' => 'CurrentStatusRed' do
     @xml.Font 'ss:Color'=>'#FFFFFF', 'ss:Bold'=>'1'
     @xml.Interior 'ss:Color'=>"#FF0000", 'ss:Pattern'=>'Solid'
   end

   @xml.Style 'ss:ID' => 's85', 'ss:Name' => 'ToBeValidated' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'0'
     @xml.Interior 'ss:Color'=>"#0087CC", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's86', 'ss:Name' => 'Feedback' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'0'
     @xml.Interior 'ss:Color'=>"#e3b7eb", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's87', 'ss:Name' => 'New' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'0'
     @xml.Interior 'ss:Color'=>"#fcbdbd", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's88', 'ss:Name' => 'Acknowledged' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'0'
     @xml.Interior 'ss:Color'=>"#ffcd85", 'ss:Pattern'=>'Solid'
   end
   @xml.Style 'ss:ID' => 's89', 'ss:Name' => 'Performed' do
     @xml.Font 'ss:Color'=>'#000000', 'ss:Bold'=>'0'
     @xml.Interior 'ss:Color'=>"#D2F5B0", 'ss:Pattern'=>'Solid'
   end
end

# STATUSES
  
  @xml.Worksheet 'ss:Name' => 'Projects Status' do
    @xml.Names do
      @xml.NamedRange 'ss:Name' => '_FilterDatabase', 'ss:RefersTo' => "='Projects Status'!R1C1:R165C9", 'ss:Hidden' => '1'
    end
    @xml.Table do

      # Columns width
      for width in ['130','34','167','239','50','63','63','130','257','257','257','257'] do
        @xml.Column nil, {'ss:Width' => width}
      end
      @xml.Column nil, {'ss:Width' => '150', 'ss:Span'=>'10'}

      # Header
      @xml.Row 'ss:StyleID' => 's62' do
        for column in ['Supervisor', 'WS','Project', 'Workpackage', 'BRN', 'Old status', 'Current Status', 'Date', 'Last change', 'Status Change Reason', 'Actions', 'Operational Alert', 'M3', 'M5', 'M7', 'M9', 'M10', 'M10a', 'M11', 'M12', 'M13', 'M14','Maint.'] do
          @xml.Cell do
            @xml.Data column, 'ss:Type' => 'String'
            @xml.NamedCell 'ss:Name' => 'FilterDatabase'
          end
        end
      end

      # Rows
      for p in @wps
        status = p.get_status
        style = {}
        style = {'ss:StyleID' => 's75'} if p.is_ended
        @xml.Row(style) do
          @xml.Cell { @xml.Data p.supervisor_name,    'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data p.workstream,         'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data p.project_name,       'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data p.name,               'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data p.brn,                'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell 'ss:StyleID' => status_excel_style2(p.old_status)  do @xml.Data text_status(p.old_status),  'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' end
          @xml.Cell 'ss:StyleID' => status_excel_style2(p.last_status) do @xml.Data text_status(p.last_status), 'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' end
          @xml.Cell { @xml.Data "#{status.updated_at.to_date} (#{time_ago_in_words(status.updated_at.to_date)})",   'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status.last_change); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status.reason); end;      @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status.actions); end;     @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          @xml.Cell { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status.operational_alert); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m3')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m5')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m7')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m9')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m10')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m10a')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m11')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m12')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m13')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('m14')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
          status, style = p.get_milestone_status('maint.')
          @xml.Cell(style) { @xml.Data('ss:Type' => 'String') do; @xml<<excel_text(status); end; @xml.NamedCell 'ss:Name' => 'FilterDatabase' }
        end
      end

    end
  @xml.AutoFilter 'x:Range' => 'R1C1:R2000C9', 'xmlns' => 'urn:schemas-microsoft-com:office:excel'
  end

# ACTIONS

  @xml.Worksheet 'ss:Name' => 'Actions' do
    @xml.Table do

      # Header
      @xml.Row 'ss:StyleID' => 's62' do
        for column in ['#','Resp', 'Target','Project', 'Action', 'Status'] do
          @xml.Cell do
            @xml.Data column, 'ss:Type' => 'String'
            @xml.NamedCell 'ss:Name' => 'FilterDatabase' 
          end
        end
      end

      # Rows
      for p in @actions
        style = {}
        style = {'ss:StyleID' => 's75'} if p.progress=='closed' or p.progress=='abandonned'
        @xml.Row(style) do
          for column in ['id', 'person_name', 'due_date', 'project_full_name', 'action', 'progress'] do
            @xml.Cell do
              @xml.Data p.send(column), 'ss:Type' => 'String'; @xml.NamedCell 'ss:Name' => 'FilterDatabase'
            end
          end
        end
      end

    end
  @xml.AutoFilter 'x:Range' => 'R1C1:R2000C6', 'xmlns' => 'urn:schemas-microsoft-com:office:excel'
  end

# REQUESTS  
  
  @xml.Worksheet 'ss:Name' => 'Requests' do
    @xml.Table do

      # Header
      @xml.Row 'ss:StyleID' => 's62' do
        for column in ['Request','WS','Summary', 'Milestone', 'WP', 'Complexity', 'Status', 'Submitted', 'Milestone'] do
          @xml.Cell do
            @xml.Data column, 'ss:Type' => 'String'
            @xml.NamedCell 'ss:Name' => 'FilterDatabase' 
          end
        end
      end

      # Rows
      for p in @requests
        @xml.Row do
          for column in ['request_id', 'workstream', 'summary', 'milestone', 'work_package', 'complexity', 'status', 'date_submitted', 'milestone_date'] do
            @xml.Cell('ss:StyleID' => request_style(p)) do
              @xml.Data p.send(column), 'ss:Type' => 'String'
              @xml.NamedCell 'ss:Name' => 'FilterDatabase'
            end
          end
        end
      end

    end
  @xml.AutoFilter 'x:Range' => 'R1C1:R2000C9', 'xmlns' => 'urn:schemas-microsoft-com:office:excel'
  end
  
  
end
%>
